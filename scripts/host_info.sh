#!/bin/bash

# constructing user arguments into variables
arg_psql_host=$1
arg_psql_port=$2
arg_db_name=$3
arg_psql_user=$4
arg_psql_password=$5

# step-1 parsing host hardware info using bash cmd/script/functions

hostname=$(hostname -f)
cpu_number=$(echo $(lscpu)  | awk '{print $12 }')
cpu_architecture=$(echo $(lscpu) | grep "Architecture:" | awk '{print $2}')
cpu_model=$(lscpu  | grep 'Model name' | awk -F ':            ' '{print $2}')
cpu_mhz=$(lscpu  | grep 'CPU MHz' | cut -c 24-31)
l2_cache=$(lscpu  | grep 'L2 cache:' | awk '{print $3+0}')
timestamp=$(date +%Y-%m-%d\ %H\:%M\:%S\.%3N)
total_mem=$(cat /proc/meminfo | head -1 |awk '{print $2}')
#psql -h $arg_psql_host -p $arg_psql_port -U $arg_psql_user -d $arg_db_name -c "$set_insert_data"


# Step-2 constructing insert statement

set_insert_data=$(cat <<-END
INSERT into host_info (hostname, cpu_number, cpu_architecture, cpu_model, cpu_mhz, L2_cache, "timestamp", total_mem)  values  ( '${hostname}', ${cpu_number}, '${cpu_architecture}', '${cpu_model}', ${cpu_mhz}, ${l2_cache}, '${timestamp}', ${total_mem} );
END
)


# step-3 executing insert statement

export PGPASSWORD=$arg_psql_password
psql -h $arg_psql_host -p $arg_psql_port -U $arg_psql_user -d $arg_db_name -c "$set_insert_data"
sleep 1

# step-4 get and save host ID which is serially/ automatically generated by PGSQL table into variable 1st-->to a local file #export PGPASSWORD=$(arg_psql_password )

host_id=`psql -h localhost -U postgres host_agent -c  "select id from host_info where hostname='${hostname}'" | tail -n 3 | head -n 1 |  xargs`
echo $host_id > ~/variable_host_id
cat ~/variable_host_id


exit 0
